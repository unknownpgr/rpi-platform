#!/usr/bin/env python3

import json
import os


def parse_type(type_str):
    if "[" in type_str:
        type, size = type_str.split("[")
        size = int(size.strip("]"))
        return {
            "is_array": True,
            "type": type,
            "size": size,
        }
    else:
        return {
            "is_array": False,
            "type": type_str,
        }


def parse_state_definition(file_path):
    with open(file_path, "r") as file:
        text = file.read()

    definition = json.loads(text)
    modes = ["IDLE"] + [mode.upper() for mode in definition["mode"]]
    variables = []
    for name, type in definition["variables"]:
        variables.append((name, parse_type(type)))

    return modes, variables


def to_c_type(type):
    if type == "uint8":
        return "uint8_t"
    elif type == "uint16":
        return "uint16_t"
    elif type == "uint32":
        return "uint32_t"
    elif type == "double":
        return "double"
    elif type == "int32":
        return "int32_t"
    else:
        print(f"Unknown type: {type}")
        exit(1)


def to_js_type(type):
    if type == "uint8":
        return "UInt8"
    elif type == "uint16":
        return "UInt16LE"
    elif type == "uint32":
        return "UInt32LE"
    elif type == "double":
        return "DoubleLE"
    elif type == "int32":
        return "Int32LE"
    else:
        print(f"Unknown type: {type}")
        exit(1)


def get_type_size(type):
    if type == "uint8":
        return 1
    elif type == "uint16":
        return 2
    elif type == "uint32":
        return 4
    elif type == "double":
        return 8
    else:
        print(f"Unknown type: {type}")
        exit(1)


def generate_state_struct(definition):
    output = "typedef struct\n{\n"

    for name, type in definition:
        if type["is_array"]:
            output += f"  {to_c_type(type['type'])} {name}[{type['size']}];\n"
        else:
            output += f"  {to_c_type(type['type'])} {name};\n"

    output += "} state_t;\n"
    return output


def generate_state_offset_print(definition):
    """
    Generate a function that prints the offset of each field in the state struct
    """
    output = "void state_print_offsets(state_t *state, char *buffer)\n{\n"
    output += '  buffer += sprintf(buffer, "[");\n'
    output += "  uint8_t* base_address = (uint8_t *)state;\n"
    for i, (name, _) in enumerate(definition):
        if i < len(definition) - 1:
            output += f'  buffer += sprintf(buffer, "%lu,", (uint64_t)(&state->{name} - base_address));\n'
        else:
            output += f'  buffer += sprintf(buffer, "%lu", (uint64_t)(&state->{name} - base_address));\n'
    output += '  buffer += sprintf(buffer, "]");\n'
    output += "}\n"
    return output


def generate_node_state_reader(definition):
    output = "function read_state(buffer, offsets) {\n"
    output += "  const state = {};\n"
    for i, (name, type) in enumerate(definition):
        if type["is_array"]:
            output += f"  state.{name} = [];\n"
            for j in range(type["size"]):
                output += f"  state.{name}[{j}] = buffer.read{to_js_type(type['type'])}(offsets[{i}] + {j * get_type_size(type['type'])});\n"
        else:
            output += f"  state.{name} = buffer.read{to_js_type(type['type'])}(offsets[{i}]);\n"
    output += "  return state;\n"
    output += "}\n"
    output += "module.exports = read_state;\n"
    return output


def main():
    os.chdir(os.path.dirname(os.path.abspath(__file__)))

    modes, definition = parse_state_definition("state-definition.json")
    struct_str = generate_state_struct(definition)
    offset_print_str = generate_state_offset_print(definition)
    node_state_reader_str = generate_node_state_reader(definition)
    with open("main/core/include/state.h", "w") as file:
        file.write("// This file is automatically generated by state-gen script\n")
        file.write("// Do not edit this file manually\n")
        file.write("#pragma once\n\n")
        file.write("#include <stdint.h>\n\n")
        file.write("#define EM_STATE_HALT 0x00\n")
        for i, mode in enumerate(modes):
            file.write(f"#define EM_STATE_{mode} 0x{1<<i:02x}\n")
        file.write("#define EM_STATE_ALL (~(uint32_t)(0))\n")
        file.write("\n")
        file.write(struct_str)
        file.write("\n")
        file.write("void state_print_offsets(state_t *state, char *buffer);\n")
        file.write("extern state_t *state;\n")
    with open("main/core/src/state.c", "w") as file:
        file.write("// This file is automatically generated by state-gen script\n")
        file.write("// Do not edit this file manually\n")
        file.write('#include "state.h"\n')
        file.write("#include <stdio.h>\n")
        file.write("#include <stdint.h>\n")
        file.write("\n")
        file.write(offset_print_str)
    with open("server/state-reader.js", "w") as file:
        file.write(node_state_reader_str)


if __name__ == "__main__":
    main()
